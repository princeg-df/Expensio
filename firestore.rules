
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSharedWith(ownerId, requiredRole) {
      let shareDoc = get(/databases/$(database)/documents/shares/$(request.auth.uid)_$(ownerId));
      if (!shareDoc.exists()) {
         let pendingShareQuery = get(query(/databases/$(database)/documents/shares).where("sharedWithEmail", "==", request.auth.email).where("ownerUid", "==", ownerId).where("status", "==", "pending"));
         if (pendingShareQuery.size() > 0) {
           return true; // Allow initial read to accept invite
         }
         return false;
      }
      
      let shareData = shareDoc.data;
      let userRole = shareData.role;

      if (requiredRole == 'viewer') {
        return userRole in ['viewer', 'editor', 'admin'];
      }
      if (requiredRole == 'editor') {
        return userRole in ['editor', 'admin'];
      }
      if (requiredRole == 'admin') {
        return userRole == 'admin';
      }
      return false;
    }
    
    match /users/{userId} {
      allow read, update, delete: if isUserAuthenticated() && isOwner(userId);
      allow create: if isUserAuthenticated();

      // Rules for subcollections
      match /{collection}/{docId} {
        allow read: if isUserAuthenticated() && (isOwner(userId) || isSharedWith(userId, 'viewer'));
        allow create, update: if isUserAuthenticated() && (isOwner(userId) || isSharedWith(userId, 'editor'));
        allow delete: if isUserAuthenticated() && (isOwner(userId) || isSharedWith(userId, 'admin'));
      }
    }

    match /shares/{shareId} {
      allow read: if isUserAuthenticated() && (resource.data.ownerUid == request.auth.uid || resource.data.sharedWithEmail == request.auth.email);
      allow create: if isUserAuthenticated() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isUserAuthenticated() && resource.data.sharedWithEmail == request.auth.email && request.resource.data.status == 'accepted';
      allow delete: if isUserAuthenticated() && resource.data.ownerUid == request.auth.uid;
    }
    
    match /groups/{groupId} {
       allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.members;

        match /expenses/{expenseId} {
          allow read, write: if isUserAuthenticated() && get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        }
    }
    
    // Admin specific rules
    match /users/{userId} {
        allow read, write: if request.auth.token.email == 'princegupta619@gmail.com';
        
        match /{collection}/{docId} {
             allow read, write: if request.auth.token.email == 'princegupta619@gmail.com';
        }
    }
  }
}
