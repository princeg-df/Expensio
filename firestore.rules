
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdminEmail() {
      return request.auth.token.email == 'princegupta619@gmail.com';
    }
    
    // SplitEase: Check if user is a member of a group
    function isGroupMember(groupId) {
      return isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Sharing: Check role for a shared account
    function getShareRole(ownerId) {
      let shares = firestore.get(/databases/$(database)/documents/shares?ownerUid=$(ownerId)&sharedWithUid_eq=$(request.auth.uid)&status_eq=accepted).docs;
      return shares.size() > 0 ? shares[0].data.role : null;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      allow read, update, delete: if isUser(userId) || isAdminEmail();
      allow create: if isSignedIn();
      
      // User's Subcollections
      match /{collection}/{docId} {
        allow read: if 
          isUser(userId) || 
          getShareRole(userId) in ['viewer', 'editor', 'admin'] ||
          isAdminEmail();
          
        allow create, update: if 
          isUser(userId) ||
          getShareRole(userId) in ['editor', 'admin'];

        allow delete: if 
          isUser(userId) ||
          getShareRole(userId) == 'admin' ||
          isAdminEmail();
      }
    }
    
    // Groups (SplitEase) Collection
    match /groups/{groupId} {
      allow read, update: if isGroupMember(groupId);
      allow create: if isSignedIn();
      
      match /expenses/{expenseId} {
         allow read, create, update, delete: if isGroupMember(groupId);
      }
    }
    
    // Shares (Sharing Invitations) Collection
    match /shares/{shareId} {
        allow create: if request.resource.data.ownerUid == request.auth.uid;
        allow read: if request.resource.data.ownerUid == request.auth.uid || request.resource.data.sharedWithEmail == request.auth.token.email;
        allow update: if request.resource.data.sharedWithEmail == request.auth.token.email && request.resource.data.status == 'pending';
        allow delete: if request.resource.data.ownerUid == request.auth.uid;
    }
  }
}
