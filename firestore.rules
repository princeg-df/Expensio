rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == 'princegupta619@gmail.com';
    }

    match /users/{userId} {
      allow read, update, delete: if isUserAuthenticated() && isOwner(userId);
      allow create: if isUserAuthenticated();

      // Admin override
      allow read, write: if isAdmin();

      match /{collection}/{docId} {
        allow read, create, update, delete: if isUserAuthenticated() && isOwner(userId);
        allow read, write: if isAdmin();
      }
    }

    match /shares/{shareId} {
      allow read: if isUserAuthenticated() &&
                  (resource.data.ownerUid == request.auth.uid ||
                   resource.data.sharedWithEmail == request.auth.token.email);
      allow create: if isUserAuthenticated() &&
                    request.resource.data.ownerUid == request.auth.uid;
      allow update: if isUserAuthenticated() &&
                    resource.data.sharedWithEmail == request.auth.token.email &&
                    request.resource.data.status == 'accepted';
      allow delete: if isUserAuthenticated() &&
                    resource.data.ownerUid == request.auth.uid;
    }

    match /groups/{groupId} {
      allow read, write: if isUserAuthenticated() &&
                          request.auth.uid in resource.data.members;

      match /expenses/{expenseId} {
        allow read, write: if isUserAuthenticated() &&
                            request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
      }
    }
  }
}
